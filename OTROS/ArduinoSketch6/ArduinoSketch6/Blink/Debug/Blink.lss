
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000bfa  00000c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800132  00800132  00000cc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c16  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019bf  00000000  00000000  00008c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bc  00000000  00000000  0000a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  0000bfac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f9d  00000000  00000000  0000c7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c6f  00000000  00000000  0000e751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000113c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_18>
  4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	e1 02       	muls	r30, r17

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ea ef       	ldi	r30, 0xFA	; 250
  d8:	fb e0       	ldi	r31, 0x0B	; 11
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a2 33       	cpi	r26, 0x32	; 50
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a2 e3       	ldi	r26, 0x32	; 50
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a9 3d       	cpi	r26, 0xD9	; 217
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 f5 05 	call	0xbea	; 0xbea <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 0f 03 	call	0x61e	; 0x61e <main>
 110:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
int in1 = 6; 
int sensor = 5;
int sensor1 = 4;
void A();
void B();
void setup() {
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
pinMode(ledPin, OUTPUT);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ledPin>
 122:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(ledPin1, OUTPUT);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPin1>
 12c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(in, OUTPUT); 
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <in>
 136:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(sensor, INPUT);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sensor>
 140:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(in1, OUTPUT); 
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <in1>
 14a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(sensor1, INPUT);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(sensorPin[0], INPUT); 
 158:	cc e0       	ldi	r28, 0x0C	; 12
 15a:	d1 e0       	ldi	r29, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	88 81       	ld	r24, Y
 160:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
pinMode(sensorPin[1], INPUT); 
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 16c:	26 e0       	ldi	r18, 0x06	; 6
 16e:	40 e8       	ldi	r20, 0x80	; 128
 170:	55 e2       	ldi	r21, 0x25	; 37
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	91 e0       	ldi	r25, 0x01	; 1
Serial.begin(9600);}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	0c 94 1a 02 	jmp	0x434	; 0x434 <_ZN14HardwareSerial5beginEmh>

00000182 <_Z1Av>:

void A(){
sensorValue=0;
 182:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
if(digitalRead(sensor) == HIGH){
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sensor>
 18a:	0e 94 a9 05 	call	0xb52	; 0xb52 <digitalRead>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	71 f5       	brne	.+92     	; 0x1ee <_Z1Av+0x6c>
sensorValue = analogRead(sensorPin[0]);
 192:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sensorPin>
 196:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <analogRead>
 19a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
digitalWrite(ledPin, HIGH);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ledPin>
 1a4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
delay(sensorValue);
 1a8:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 81 04 	call	0x902	; 0x902 <delay>
digitalWrite(ledPin, LOW);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ledPin>
 1bc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
delay(sensorValue);
 1c0:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 81 04 	call	0x902	; 0x902 <delay>
digitalWrite(in,LOW);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <in>
 1d4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
Serial.println(analogRead(sensorPin[0]));} 
 1d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sensorPin>
 1dc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <analogRead>
 1e0:	4a e0       	ldi	r20, 0x0A	; 10
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	bc 01       	movw	r22, r24
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0c 94 00 04 	jmp	0x800	; 0x800 <_ZN5Print7printlnEii>
else{
digitalWrite(in,HIGH);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <in>
 1f4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
digitalWrite(ledPin, LOW);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ledPin>
 1fe:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <digitalWrite>

00000202 <_Z1Bv>:
  
  }


void B(){
sensorValue=0;
 202:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
if(digitalRead(sensor1) == HIGH){
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	0e 94 a9 05 	call	0xb52	; 0xb52 <digitalRead>
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	71 f5       	brne	.+92     	; 0x26e <_Z1Bv+0x6c>
sensorValue = analogRead(sensorPin[1]);
 212:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin+0x2>
 216:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <analogRead>
 21a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
digitalWrite(ledPin1, HIGH);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPin1>
 224:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
delay(sensorValue);
 228:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 81 04 	call	0x902	; 0x902 <delay>
digitalWrite(ledPin1, LOW);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPin1>
 23c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
delay(sensorValue);
 240:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 81 04 	call	0x902	; 0x902 <delay>
digitalWrite(in1,LOW);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <in1>
 254:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
Serial.println(analogRead(sensorPin[1]));} 
 258:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin+0x2>
 25c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <analogRead>
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	bc 01       	movw	r22, r24
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0c 94 00 04 	jmp	0x800	; 0x800 <_ZN5Print7printlnEii>
else{
digitalWrite(in1,HIGH);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <in1>
 274:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <digitalWrite>
digitalWrite(ledPin1, LOW);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPin1>
 27e:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <digitalWrite>

00000282 <loop>:
  }
  
  }

void loop() {
A();
 282:	0e 94 c1 00 	call	0x182	; 0x182 <_Z1Av>
B();  
 286:	0c 94 01 01 	jmp	0x202	; 0x202 <_Z1Bv>

0000028a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 28a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 28c:	91 8d       	ldd	r25, Z+25	; 0x19
 28e:	22 8d       	ldd	r18, Z+26	; 0x1a
 290:	89 2f       	mov	r24, r25
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	80 5c       	subi	r24, 0xC0	; 192
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	82 1b       	sub	r24, r18
 29a:	91 09       	sbc	r25, r1
}
 29c:	8f 73       	andi	r24, 0x3F	; 63
 29e:	99 27       	eor	r25, r25
 2a0:	08 95       	ret

000002a2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2a2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2a4:	91 8d       	ldd	r25, Z+25	; 0x19
 2a6:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a8:	98 17       	cp	r25, r24
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2ac:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ae:	e8 0f       	add	r30, r24
 2b0:	f1 1d       	adc	r31, r1
 2b2:	85 8d       	ldd	r24, Z+29	; 0x1d
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2bc:	08 95       	ret

000002be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2be:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2c0:	91 8d       	ldd	r25, Z+25	; 0x19
 2c2:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c4:	98 17       	cp	r25, r24
 2c6:	61 f0       	breq	.+24     	; 0x2e0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2c8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ca:	df 01       	movw	r26, r30
 2cc:	a8 0f       	add	r26, r24
 2ce:	b1 1d       	adc	r27, r1
 2d0:	5d 96       	adiw	r26, 0x1d	; 29
 2d2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2d4:	92 8d       	ldd	r25, Z+26	; 0x1a
 2d6:	9f 5f       	subi	r25, 0xFF	; 255
 2d8:	9f 73       	andi	r25, 0x3F	; 63
 2da:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2e4:	08 95       	ret

000002e6 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 2e6:	fc 01       	movw	r30, r24
 2e8:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 2ea:	44 8d       	ldd	r20, Z+28	; 0x1c
 2ec:	25 2f       	mov	r18, r21
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	84 2f       	mov	r24, r20
 2f2:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	54 17       	cp	r21, r20
 2fa:	10 f0       	brcs	.+4      	; 0x300 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 2fc:	cf 96       	adiw	r24, 0x3f	; 63
 2fe:	08 95       	ret
  return tail - head - 1;
 300:	01 97       	sbiw	r24, 0x01	; 1
}
 302:	08 95       	ret

00000304 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 304:	87 ed       	ldi	r24, 0xD7	; 215
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	89 2b       	or	r24, r25
 30a:	49 f0       	breq	.+18     	; 0x31e <_Z14serialEventRunv+0x1a>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	89 2b       	or	r24, r25
 312:	29 f0       	breq	.+10     	; 0x31e <_Z14serialEventRunv+0x1a>
 314:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17Serial0_availablev>
 318:	81 11       	cpse	r24, r1
 31a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 31e:	08 95       	ret

00000320 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 320:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 322:	84 8d       	ldd	r24, Z+28	; 0x1c
 324:	df 01       	movw	r26, r30
 326:	a8 0f       	add	r26, r24
 328:	b1 1d       	adc	r27, r1
 32a:	a3 5a       	subi	r26, 0xA3	; 163
 32c:	bf 4f       	sbci	r27, 0xFF	; 255
 32e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 330:	84 8d       	ldd	r24, Z+28	; 0x1c
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	8f 73       	andi	r24, 0x3F	; 63
 338:	99 27       	eor	r25, r25
 33a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 33c:	a6 89       	ldd	r26, Z+22	; 0x16
 33e:	b7 89       	ldd	r27, Z+23	; 0x17
 340:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 342:	a0 89       	ldd	r26, Z+16	; 0x10
 344:	b1 89       	ldd	r27, Z+17	; 0x11
 346:	8c 91       	ld	r24, X
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 34c:	93 8d       	ldd	r25, Z+27	; 0x1b
 34e:	84 8d       	ldd	r24, Z+28	; 0x1c
 350:	98 13       	cpse	r25, r24
 352:	06 c0       	rjmp	.+12     	; 0x360 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 354:	02 88       	ldd	r0, Z+18	; 0x12
 356:	f3 89       	ldd	r31, Z+19	; 0x13
 358:	e0 2d       	mov	r30, r0
 35a:	80 81       	ld	r24, Z
 35c:	8f 7d       	andi	r24, 0xDF	; 223
 35e:	80 83       	st	Z, r24
 360:	08 95       	ret

00000362 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
  _written = true;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 374:	9b 8d       	ldd	r25, Y+27	; 0x1b
 376:	8c 8d       	ldd	r24, Y+28	; 0x1c
 378:	98 13       	cpse	r25, r24
 37a:	05 c0       	rjmp	.+10     	; 0x386 <_ZN14HardwareSerial5writeEh+0x24>
 37c:	e8 89       	ldd	r30, Y+16	; 0x10
 37e:	f9 89       	ldd	r31, Y+17	; 0x11
 380:	80 81       	ld	r24, Z
 382:	85 fd       	sbrc	r24, 5
 384:	24 c0       	rjmp	.+72     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x6c>
 386:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 388:	0b 8d       	ldd	r16, Y+27	; 0x1b
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	0f 5f       	subi	r16, 0xFF	; 255
 38e:	1f 4f       	sbci	r17, 0xFF	; 255
 390:	0f 73       	andi	r16, 0x3F	; 63
 392:	11 27       	eor	r17, r17
 394:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 396:	8c 8d       	ldd	r24, Y+28	; 0x1c
 398:	e8 12       	cpse	r14, r24
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	07 fc       	sbrc	r0, 7
 3a0:	fa cf       	rjmp	.-12     	; 0x396 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3a2:	e8 89       	ldd	r30, Y+16	; 0x10
 3a4:	f9 89       	ldd	r31, Y+17	; 0x11
 3a6:	80 81       	ld	r24, Z
 3a8:	85 ff       	sbrs	r24, 5
 3aa:	f5 cf       	rjmp	.-22     	; 0x396 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 90 01 	call	0x320	; 0x320 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3b2:	f1 cf       	rjmp	.-30     	; 0x396 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3b6:	fe 01       	movw	r30, r28
 3b8:	e8 0f       	add	r30, r24
 3ba:	f1 1d       	adc	r31, r1
 3bc:	e3 5a       	subi	r30, 0xA3	; 163
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 3c2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 3c4:	ea 89       	ldd	r30, Y+18	; 0x12
 3c6:	fb 89       	ldd	r31, Y+19	; 0x13
 3c8:	80 81       	ld	r24, Z
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3ce:	ee 89       	ldd	r30, Y+22	; 0x16
 3d0:	ff 89       	ldd	r31, Y+23	; 0x17
 3d2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 3d4:	e8 89       	ldd	r30, Y+16	; 0x10
 3d6:	f9 89       	ldd	r31, Y+17	; 0x11
 3d8:	80 81       	ld	r24, Z
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	08 95       	ret

000003f0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3f6:	88 8d       	ldd	r24, Y+24	; 0x18
 3f8:	88 23       	and	r24, r24
 3fa:	c9 f0       	breq	.+50     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3fc:	ea 89       	ldd	r30, Y+18	; 0x12
 3fe:	fb 89       	ldd	r31, Y+19	; 0x13
 400:	80 81       	ld	r24, Z
 402:	85 fd       	sbrc	r24, 5
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	a8 89       	ldd	r26, Y+16	; 0x10
 408:	b9 89       	ldd	r27, Y+17	; 0x11
 40a:	8c 91       	ld	r24, X
 40c:	86 fd       	sbrc	r24, 6
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	07 fc       	sbrc	r0, 7
 414:	f5 cf       	rjmp	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	80 81       	ld	r24, Z
 418:	85 ff       	sbrs	r24, 5
 41a:	f2 cf       	rjmp	.-28     	; 0x400 <__LOCK_REGION_LENGTH__>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 41c:	a8 89       	ldd	r26, Y+16	; 0x10
 41e:	b9 89       	ldd	r27, Y+17	; 0x11
 420:	8c 91       	ld	r24, X
 422:	85 ff       	sbrs	r24, 5
 424:	ed cf       	rjmp	.-38     	; 0x400 <__LOCK_REGION_LENGTH__>
	  _tx_udr_empty_irq();
 426:	ce 01       	movw	r24, r28
 428:	0e 94 90 01 	call	0x320	; 0x320 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 42c:	e7 cf       	rjmp	.-50     	; 0x3fc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ec 01       	movw	r28, r24
 444:	6a 01       	movw	r12, r20
 446:	7b 01       	movw	r14, r22
 448:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 44a:	e8 89       	ldd	r30, Y+16	; 0x10
 44c:	f9 89       	ldd	r31, Y+17	; 0x11
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 452:	41 15       	cp	r20, r1
 454:	51 4e       	sbci	r21, 0xE1	; 225
 456:	61 05       	cpc	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	b1 f0       	breq	.+44     	; 0x488 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	79 e0       	ldi	r23, 0x09	; 9
 460:	8d e3       	ldi	r24, 0x3D	; 61
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	a7 01       	movw	r20, r14
 466:	96 01       	movw	r18, r12
 468:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodsi4>
 46c:	da 01       	movw	r26, r20
 46e:	c9 01       	movw	r24, r18
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	a1 09       	sbc	r26, r1
 474:	b1 09       	sbc	r27, r1
 476:	b6 95       	lsr	r27
 478:	a7 95       	ror	r26
 47a:	97 95       	ror	r25
 47c:	87 95       	ror	r24
 47e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 480:	21 15       	cp	r18, r1
 482:	80 e1       	ldi	r24, 0x10	; 16
 484:	38 07       	cpc	r19, r24
 486:	a8 f0       	brcs	.+42     	; 0x4b2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 488:	e8 89       	ldd	r30, Y+16	; 0x10
 48a:	f9 89       	ldd	r31, Y+17	; 0x11
 48c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 48e:	60 e8       	ldi	r22, 0x80	; 128
 490:	74 e8       	ldi	r23, 0x84	; 132
 492:	8e e1       	ldi	r24, 0x1E	; 30
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a7 01       	movw	r20, r14
 498:	96 01       	movw	r18, r12
 49a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodsi4>
 49e:	da 01       	movw	r26, r20
 4a0:	c9 01       	movw	r24, r18
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	a1 09       	sbc	r26, r1
 4a6:	b1 09       	sbc	r27, r1
 4a8:	b6 95       	lsr	r27
 4aa:	a7 95       	ror	r26
 4ac:	97 95       	ror	r25
 4ae:	87 95       	ror	r24
 4b0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4b2:	ec 85       	ldd	r30, Y+12	; 0x0c
 4b4:	fd 85       	ldd	r31, Y+13	; 0x0d
 4b6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4b8:	ee 85       	ldd	r30, Y+14	; 0x0e
 4ba:	ff 85       	ldd	r31, Y+15	; 0x0f
 4bc:	20 83       	st	Z, r18

  _written = false;
 4be:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4c0:	ec 89       	ldd	r30, Y+20	; 0x14
 4c2:	fd 89       	ldd	r31, Y+21	; 0x15
 4c4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 4c6:	ea 89       	ldd	r30, Y+18	; 0x12
 4c8:	fb 89       	ldd	r31, Y+19	; 0x13
 4ca:	80 81       	ld	r24, Z
 4cc:	80 61       	ori	r24, 0x10	; 16
 4ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 4d0:	ea 89       	ldd	r30, Y+18	; 0x12
 4d2:	fb 89       	ldd	r31, Y+19	; 0x13
 4d4:	80 81       	ld	r24, Z
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 4da:	ea 89       	ldd	r30, Y+18	; 0x12
 4dc:	fb 89       	ldd	r31, Y+19	; 0x13
 4de:	80 81       	ld	r24, Z
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4e4:	ea 89       	ldd	r30, Y+18	; 0x12
 4e6:	fb 89       	ldd	r31, Y+19	; 0x13
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	80 83       	st	Z, r24
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 512:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Serial+0x10>
 516:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Serial+0x11>
 51a:	80 81       	ld	r24, Z
 51c:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <Serial+0x16>
 520:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <Serial+0x17>
 524:	82 fd       	sbrc	r24, 2
 526:	12 c0       	rjmp	.+36     	; 0x54c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 528:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 52a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Serial+0x19>
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 532:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <Serial+0x1a>
 536:	82 17       	cp	r24, r18
 538:	51 f0       	breq	.+20     	; 0x54e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 53a:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Serial+0x19>
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	ed 5c       	subi	r30, 0xCD	; 205
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 546:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Serial+0x19>
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 54c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 584:	83 e3       	ldi	r24, 0x33	; 51
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 90 01 	call	0x320	; 0x320 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5ae:	83 e3       	ldi	r24, 0x33	; 51
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN14HardwareSerial9availableEv>
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	89 2b       	or	r24, r25
 5ba:	09 f4       	brne	.+2      	; 0x5be <_Z17Serial0_availablev+0x10>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
}
 5be:	82 2f       	mov	r24, r18
 5c0:	08 95       	ret

000005c2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5c2:	e3 e3       	ldi	r30, 0x33	; 51
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	13 82       	std	Z+3, r1	; 0x03
 5c8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 5ca:	88 ee       	ldi	r24, 0xE8	; 232
 5cc:	93 e0       	ldi	r25, 0x03	; 3
 5ce:	a0 e0       	ldi	r26, 0x00	; 0
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	84 83       	std	Z+4, r24	; 0x04
 5d4:	95 83       	std	Z+5, r25	; 0x05
 5d6:	a6 83       	std	Z+6, r26	; 0x06
 5d8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5da:	85 e1       	ldi	r24, 0x15	; 21
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	91 83       	std	Z+1, r25	; 0x01
 5e0:	80 83       	st	Z, r24
 5e2:	85 ec       	ldi	r24, 0xC5	; 197
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	95 87       	std	Z+13, r25	; 0x0d
 5e8:	84 87       	std	Z+12, r24	; 0x0c
 5ea:	84 ec       	ldi	r24, 0xC4	; 196
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	97 87       	std	Z+15, r25	; 0x0f
 5f0:	86 87       	std	Z+14, r24	; 0x0e
 5f2:	80 ec       	ldi	r24, 0xC0	; 192
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	91 8b       	std	Z+17, r25	; 0x11
 5f8:	80 8b       	std	Z+16, r24	; 0x10
 5fa:	81 ec       	ldi	r24, 0xC1	; 193
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	93 8b       	std	Z+19, r25	; 0x13
 600:	82 8b       	std	Z+18, r24	; 0x12
 602:	82 ec       	ldi	r24, 0xC2	; 194
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	95 8b       	std	Z+21, r25	; 0x15
 608:	84 8b       	std	Z+20, r24	; 0x14
 60a:	86 ec       	ldi	r24, 0xC6	; 198
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	97 8b       	std	Z+23, r25	; 0x17
 610:	86 8b       	std	Z+22, r24	; 0x16
 612:	11 8e       	std	Z+25, r1	; 0x19
 614:	12 8e       	std	Z+26, r1	; 0x1a
 616:	13 8e       	std	Z+27, r1	; 0x1b
 618:	14 8e       	std	Z+28, r1	; 0x1c
 61a:	08 95       	ret

0000061c <initVariant>:
 61c:	08 95       	ret

0000061e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 61e:	0e 94 bd 04 	call	0x97a	; 0x97a <init>

	initVariant();
 622:	0e 94 0e 03 	call	0x61c	; 0x61c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 626:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 62a:	c2 e8       	ldi	r28, 0x82	; 130
 62c:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 62e:	0e 94 41 01 	call	0x282	; 0x282 <loop>
		if (serialEventRun) serialEventRun();
 632:	20 97       	sbiw	r28, 0x00	; 0
 634:	e1 f3       	breq	.-8      	; 0x62e <main+0x10>
 636:	0e 94 82 01 	call	0x304	; 0x304 <_Z14serialEventRunv>
 63a:	f9 cf       	rjmp	.-14     	; 0x62e <main+0x10>

0000063c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	6c 01       	movw	r12, r24
 64e:	7a 01       	movw	r14, r20
 650:	8b 01       	movw	r16, r22
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	ce 15       	cp	r28, r14
 658:	df 05       	cpc	r29, r15
 65a:	81 f0       	breq	.+32     	; 0x67c <_ZN5Print5writeEPKhj+0x40>
 65c:	d8 01       	movw	r26, r16
 65e:	6d 91       	ld	r22, X+
 660:	8d 01       	movw	r16, r26
 662:	d6 01       	movw	r26, r12
 664:	ed 91       	ld	r30, X+
 666:	fc 91       	ld	r31, X
 668:	01 90       	ld	r0, Z+
 66a:	f0 81       	ld	r31, Z
 66c:	e0 2d       	mov	r30, r0
 66e:	c6 01       	movw	r24, r12
 670:	09 95       	icall
 672:	89 2b       	or	r24, r25
 674:	11 f0       	breq	.+4      	; 0x67a <_ZN5Print5writeEPKhj+0x3e>
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	ee cf       	rjmp	.-36     	; 0x656 <_ZN5Print5writeEPKhj+0x1a>
 67a:	7e 01       	movw	r14, r28
 67c:	c7 01       	movw	r24, r14
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	ff 90       	pop	r15
 688:	ef 90       	pop	r14
 68a:	df 90       	pop	r13
 68c:	cf 90       	pop	r12
 68e:	08 95       	ret

00000690 <_ZN5Print5writeEPKc>:
 690:	61 15       	cp	r22, r1
 692:	71 05       	cpc	r23, r1
 694:	79 f0       	breq	.+30     	; 0x6b4 <_ZN5Print5writeEPKc+0x24>
 696:	fb 01       	movw	r30, r22
 698:	01 90       	ld	r0, Z+
 69a:	00 20       	and	r0, r0
 69c:	e9 f7       	brne	.-6      	; 0x698 <_ZN5Print5writeEPKc+0x8>
 69e:	31 97       	sbiw	r30, 0x01	; 1
 6a0:	af 01       	movw	r20, r30
 6a2:	46 1b       	sub	r20, r22
 6a4:	57 0b       	sbc	r21, r23
 6a6:	dc 01       	movw	r26, r24
 6a8:	ed 91       	ld	r30, X+
 6aa:	fc 91       	ld	r31, X
 6ac:	02 80       	ldd	r0, Z+2	; 0x02
 6ae:	f3 81       	ldd	r31, Z+3	; 0x03
 6b0:	e0 2d       	mov	r30, r0
 6b2:	09 94       	ijmp
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <_ZN5Print5printEc>:
 6ba:	dc 01       	movw	r26, r24
 6bc:	ed 91       	ld	r30, X+
 6be:	fc 91       	ld	r31, X
 6c0:	01 90       	ld	r0, Z+
 6c2:	f0 81       	ld	r31, Z
 6c4:	e0 2d       	mov	r30, r0
 6c6:	09 94       	ijmp

000006c8 <_ZN5Print7printlnEv>:
 6c8:	63 e2       	ldi	r22, 0x23	; 35
 6ca:	71 e0       	ldi	r23, 0x01	; 1
 6cc:	0c 94 48 03 	jmp	0x690	; 0x690 <_ZN5Print5writeEPKc>

000006d0 <_ZN5Print11printNumberEmh>:
 6d0:	8f 92       	push	r8
 6d2:	9f 92       	push	r9
 6d4:	af 92       	push	r10
 6d6:	bf 92       	push	r11
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	a1 97       	sbiw	r28, 0x21	; 33
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	7c 01       	movw	r14, r24
 6f6:	fa 01       	movw	r30, r20
 6f8:	cb 01       	movw	r24, r22
 6fa:	19 a2       	std	Y+33, r1	; 0x21
 6fc:	22 30       	cpi	r18, 0x02	; 2
 6fe:	08 f4       	brcc	.+2      	; 0x702 <_ZN5Print11printNumberEmh+0x32>
 700:	2a e0       	ldi	r18, 0x0A	; 10
 702:	8e 01       	movw	r16, r28
 704:	0f 5d       	subi	r16, 0xDF	; 223
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	82 2e       	mov	r8, r18
 70a:	91 2c       	mov	r9, r1
 70c:	a1 2c       	mov	r10, r1
 70e:	b1 2c       	mov	r11, r1
 710:	bf 01       	movw	r22, r30
 712:	a5 01       	movw	r20, r10
 714:	94 01       	movw	r18, r8
 716:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodsi4>
 71a:	f9 01       	movw	r30, r18
 71c:	ca 01       	movw	r24, r20
 71e:	01 50       	subi	r16, 0x01	; 1
 720:	11 09       	sbc	r17, r1
 722:	6a 30       	cpi	r22, 0x0A	; 10
 724:	10 f4       	brcc	.+4      	; 0x72a <_ZN5Print11printNumberEmh+0x5a>
 726:	60 5d       	subi	r22, 0xD0	; 208
 728:	01 c0       	rjmp	.+2      	; 0x72c <_ZN5Print11printNumberEmh+0x5c>
 72a:	69 5c       	subi	r22, 0xC9	; 201
 72c:	d8 01       	movw	r26, r16
 72e:	6c 93       	st	X, r22
 730:	23 2b       	or	r18, r19
 732:	24 2b       	or	r18, r20
 734:	25 2b       	or	r18, r21
 736:	61 f7       	brne	.-40     	; 0x710 <_ZN5Print11printNumberEmh+0x40>
 738:	b8 01       	movw	r22, r16
 73a:	c7 01       	movw	r24, r14
 73c:	0e 94 48 03 	call	0x690	; 0x690 <_ZN5Print5writeEPKc>
 740:	a1 96       	adiw	r28, 0x21	; 33
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	de bf       	out	0x3e, r29	; 62
 748:	0f be       	out	0x3f, r0	; 63
 74a:	cd bf       	out	0x3d, r28	; 61
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	bf 90       	pop	r11
 75a:	af 90       	pop	r10
 75c:	9f 90       	pop	r9
 75e:	8f 90       	pop	r8
 760:	08 95       	ret

00000762 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 762:	cf 92       	push	r12
 764:	df 92       	push	r13
 766:	ef 92       	push	r14
 768:	ff 92       	push	r15
 76a:	0f 93       	push	r16
 76c:	1f 93       	push	r17
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
  if (base == 0) {
 772:	21 15       	cp	r18, r1
 774:	31 05       	cpc	r19, r1
 776:	81 f4       	brne	.+32     	; 0x798 <_ZN5Print5printEli+0x36>
    return write(n);
 778:	dc 01       	movw	r26, r24
 77a:	ed 91       	ld	r30, X+
 77c:	fc 91       	ld	r31, X
 77e:	01 90       	ld	r0, Z+
 780:	f0 81       	ld	r31, Z
 782:	e0 2d       	mov	r30, r0
 784:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	df 90       	pop	r13
 794:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 796:	09 94       	ijmp
  } else if (base == 10) {
 798:	2a 30       	cpi	r18, 0x0A	; 10
 79a:	31 05       	cpc	r19, r1
 79c:	01 f5       	brne	.+64     	; 0x7de <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 79e:	77 ff       	sbrs	r23, 7
 7a0:	1d c0       	rjmp	.+58     	; 0x7dc <_ZN5Print5printEli+0x7a>
 7a2:	6a 01       	movw	r12, r20
 7a4:	7b 01       	movw	r14, r22
 7a6:	ec 01       	movw	r28, r24
      int t = print('-');
 7a8:	6d e2       	ldi	r22, 0x2D	; 45
 7aa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5printEc>
 7ae:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 7b0:	44 27       	eor	r20, r20
 7b2:	55 27       	eor	r21, r21
 7b4:	ba 01       	movw	r22, r20
 7b6:	4c 19       	sub	r20, r12
 7b8:	5d 09       	sbc	r21, r13
 7ba:	6e 09       	sbc	r22, r14
 7bc:	7f 09       	sbc	r23, r15
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	ce 01       	movw	r24, r28
 7c2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN5Print11printNumberEmh>
 7c6:	80 0f       	add	r24, r16
 7c8:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	df 90       	pop	r13
 7d8:	cf 90       	pop	r12
 7da:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 7dc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 7ee:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <_ZN5Print11printNumberEmh>

000007f2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 7f2:	9a 01       	movw	r18, r20
  return print((long) n, base);
 7f4:	ab 01       	movw	r20, r22
 7f6:	77 0f       	add	r23, r23
 7f8:	66 0b       	sbc	r22, r22
 7fa:	77 0b       	sbc	r23, r23
 7fc:	0c 94 b1 03 	jmp	0x762	; 0x762 <_ZN5Print5printEli>

00000800 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 80a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN5Print5printEii>
 80e:	8c 01       	movw	r16, r24
  n += println();
 810:	ce 01       	movw	r24, r28
 812:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN5Print7printlnEv>
  return n;
}
 816:	80 0f       	add	r24, r16
 818:	91 1f       	adc	r25, r17
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	08 95       	ret

00000824 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	8f 93       	push	r24
 834:	9f 93       	push	r25
 836:	af 93       	push	r26
 838:	bf 93       	push	r27
 83a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_millis>
 83e:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_millis+0x1>
 842:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_millis+0x2>
 846:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_millis+0x3>
 84a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <timer0_fract>
 84e:	23 e0       	ldi	r18, 0x03	; 3
 850:	23 0f       	add	r18, r19
 852:	2d 37       	cpi	r18, 0x7D	; 125
 854:	20 f4       	brcc	.+8      	; 0x85e <__vector_16+0x3a>
 856:	01 96       	adiw	r24, 0x01	; 1
 858:	a1 1d       	adc	r26, r1
 85a:	b1 1d       	adc	r27, r1
 85c:	05 c0       	rjmp	.+10     	; 0x868 <__vector_16+0x44>
 85e:	26 e8       	ldi	r18, 0x86	; 134
 860:	23 0f       	add	r18, r19
 862:	02 96       	adiw	r24, 0x02	; 2
 864:	a1 1d       	adc	r26, r1
 866:	b1 1d       	adc	r27, r1
 868:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <timer0_fract>
 86c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <timer0_millis>
 870:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <timer0_millis+0x1>
 874:	a0 93 d3 01 	sts	0x01D3, r26	; 0x8001d3 <timer0_millis+0x2>
 878:	b0 93 d4 01 	sts	0x01D4, r27	; 0x8001d4 <timer0_millis+0x3>
 87c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <timer0_overflow_count>
 880:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <timer0_overflow_count+0x1>
 884:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x2>
 888:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x3>
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	a1 1d       	adc	r26, r1
 890:	b1 1d       	adc	r27, r1
 892:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <timer0_overflow_count>
 896:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <timer0_overflow_count+0x1>
 89a:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <timer0_overflow_count+0x2>
 89e:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <timer0_overflow_count+0x3>
 8a2:	bf 91       	pop	r27
 8a4:	af 91       	pop	r26
 8a6:	9f 91       	pop	r25
 8a8:	8f 91       	pop	r24
 8aa:	3f 91       	pop	r19
 8ac:	2f 91       	pop	r18
 8ae:	0f 90       	pop	r0
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	0f 90       	pop	r0
 8b4:	1f 90       	pop	r1
 8b6:	18 95       	reti

000008b8 <micros>:
 8b8:	3f b7       	in	r19, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <timer0_overflow_count>
 8c0:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <timer0_overflow_count+0x1>
 8c4:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x2>
 8c8:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x3>
 8cc:	26 b5       	in	r18, 0x26	; 38
 8ce:	a8 9b       	sbis	0x15, 0	; 21
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <micros+0x24>
 8d2:	2f 3f       	cpi	r18, 0xFF	; 255
 8d4:	19 f0       	breq	.+6      	; 0x8dc <micros+0x24>
 8d6:	01 96       	adiw	r24, 0x01	; 1
 8d8:	a1 1d       	adc	r26, r1
 8da:	b1 1d       	adc	r27, r1
 8dc:	3f bf       	out	0x3f, r19	; 63
 8de:	ba 2f       	mov	r27, r26
 8e0:	a9 2f       	mov	r26, r25
 8e2:	98 2f       	mov	r25, r24
 8e4:	88 27       	eor	r24, r24
 8e6:	82 0f       	add	r24, r18
 8e8:	91 1d       	adc	r25, r1
 8ea:	a1 1d       	adc	r26, r1
 8ec:	b1 1d       	adc	r27, r1
 8ee:	bc 01       	movw	r22, r24
 8f0:	cd 01       	movw	r24, r26
 8f2:	42 e0       	ldi	r20, 0x02	; 2
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	4a 95       	dec	r20
 8fe:	d1 f7       	brne	.-12     	; 0x8f4 <micros+0x3c>
 900:	08 95       	ret

00000902 <delay>:
 902:	8f 92       	push	r8
 904:	9f 92       	push	r9
 906:	af 92       	push	r10
 908:	bf 92       	push	r11
 90a:	cf 92       	push	r12
 90c:	df 92       	push	r13
 90e:	ef 92       	push	r14
 910:	ff 92       	push	r15
 912:	6b 01       	movw	r12, r22
 914:	7c 01       	movw	r14, r24
 916:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <micros>
 91a:	4b 01       	movw	r8, r22
 91c:	5c 01       	movw	r10, r24
 91e:	c1 14       	cp	r12, r1
 920:	d1 04       	cpc	r13, r1
 922:	e1 04       	cpc	r14, r1
 924:	f1 04       	cpc	r15, r1
 926:	01 f1       	breq	.+64     	; 0x968 <delay+0x66>
 928:	0e 94 d2 05 	call	0xba4	; 0xba4 <yield>
 92c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <micros>
 930:	dc 01       	movw	r26, r24
 932:	cb 01       	movw	r24, r22
 934:	88 19       	sub	r24, r8
 936:	99 09       	sbc	r25, r9
 938:	aa 09       	sbc	r26, r10
 93a:	bb 09       	sbc	r27, r11
 93c:	88 3e       	cpi	r24, 0xE8	; 232
 93e:	93 40       	sbci	r25, 0x03	; 3
 940:	a1 05       	cpc	r26, r1
 942:	b1 05       	cpc	r27, r1
 944:	60 f3       	brcs	.-40     	; 0x91e <delay+0x1c>
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	c2 1a       	sub	r12, r18
 94a:	d1 08       	sbc	r13, r1
 94c:	e1 08       	sbc	r14, r1
 94e:	f1 08       	sbc	r15, r1
 950:	88 ee       	ldi	r24, 0xE8	; 232
 952:	88 0e       	add	r8, r24
 954:	83 e0       	ldi	r24, 0x03	; 3
 956:	98 1e       	adc	r9, r24
 958:	a1 1c       	adc	r10, r1
 95a:	b1 1c       	adc	r11, r1
 95c:	c1 14       	cp	r12, r1
 95e:	d1 04       	cpc	r13, r1
 960:	e1 04       	cpc	r14, r1
 962:	f1 04       	cpc	r15, r1
 964:	19 f7       	brne	.-58     	; 0x92c <delay+0x2a>
 966:	db cf       	rjmp	.-74     	; 0x91e <delay+0x1c>
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	df 90       	pop	r13
 96e:	cf 90       	pop	r12
 970:	bf 90       	pop	r11
 972:	af 90       	pop	r10
 974:	9f 90       	pop	r9
 976:	8f 90       	pop	r8
 978:	08 95       	ret

0000097a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 97a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 97c:	84 b5       	in	r24, 0x24	; 36
 97e:	82 60       	ori	r24, 0x02	; 2
 980:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 982:	84 b5       	in	r24, 0x24	; 36
 984:	81 60       	ori	r24, 0x01	; 1
 986:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 988:	85 b5       	in	r24, 0x25	; 37
 98a:	82 60       	ori	r24, 0x02	; 2
 98c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 98e:	85 b5       	in	r24, 0x25	; 37
 990:	81 60       	ori	r24, 0x01	; 1
 992:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 994:	ee e6       	ldi	r30, 0x6E	; 110
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 99e:	e1 e8       	ldi	r30, 0x81	; 129
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9a4:	80 81       	ld	r24, Z
 9a6:	82 60       	ori	r24, 0x02	; 2
 9a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9aa:	80 81       	ld	r24, Z
 9ac:	81 60       	ori	r24, 0x01	; 1
 9ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9b0:	e0 e8       	ldi	r30, 0x80	; 128
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	81 60       	ori	r24, 0x01	; 1
 9b8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9ba:	e1 eb       	ldi	r30, 0xB1	; 177
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	84 60       	ori	r24, 0x04	; 4
 9c2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9c4:	e0 eb       	ldi	r30, 0xB0	; 176
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	81 60       	ori	r24, 0x01	; 1
 9cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9ce:	ea e7       	ldi	r30, 0x7A	; 122
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	84 60       	ori	r24, 0x04	; 4
 9d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9d8:	80 81       	ld	r24, Z
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9de:	80 81       	ld	r24, Z
 9e0:	81 60       	ori	r24, 0x01	; 1
 9e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9e4:	80 81       	ld	r24, Z
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9ee:	08 95       	ret

000009f0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 9f0:	8e 30       	cpi	r24, 0x0E	; 14
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <analogRead+0x6>
 9f4:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 9f6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <analog_reference>
 9fa:	90 e4       	ldi	r25, 0x40	; 64
 9fc:	29 9f       	mul	r18, r25
 9fe:	90 01       	movw	r18, r0
 a00:	11 24       	eor	r1, r1
 a02:	87 70       	andi	r24, 0x07	; 7
 a04:	82 2b       	or	r24, r18
 a06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 a0a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a0e:	80 64       	ori	r24, 0x40	; 64
 a10:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 a14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a18:	86 fd       	sbrc	r24, 6
 a1a:	fc cf       	rjmp	.-8      	; 0xa14 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 a1c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 a20:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 a24:	90 e0       	ldi	r25, 0x00	; 0
}
 a26:	92 2b       	or	r25, r18
 a28:	08 95       	ret

00000a2a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a2a:	83 30       	cpi	r24, 0x03	; 3
 a2c:	81 f0       	breq	.+32     	; 0xa4e <turnOffPWM+0x24>
 a2e:	28 f4       	brcc	.+10     	; 0xa3a <turnOffPWM+0x10>
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	99 f0       	breq	.+38     	; 0xa5a <turnOffPWM+0x30>
 a34:	82 30       	cpi	r24, 0x02	; 2
 a36:	a1 f0       	breq	.+40     	; 0xa60 <turnOffPWM+0x36>
 a38:	08 95       	ret
 a3a:	87 30       	cpi	r24, 0x07	; 7
 a3c:	a9 f0       	breq	.+42     	; 0xa68 <turnOffPWM+0x3e>
 a3e:	88 30       	cpi	r24, 0x08	; 8
 a40:	b9 f0       	breq	.+46     	; 0xa70 <turnOffPWM+0x46>
 a42:	84 30       	cpi	r24, 0x04	; 4
 a44:	d1 f4       	brne	.+52     	; 0xa7a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a4a:	8f 7d       	andi	r24, 0xDF	; 223
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a4e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a52:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a54:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a58:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a5a:	84 b5       	in	r24, 0x24	; 36
 a5c:	8f 77       	andi	r24, 0x7F	; 127
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a60:	84 b5       	in	r24, 0x24	; 36
 a62:	8f 7d       	andi	r24, 0xDF	; 223
 a64:	84 bd       	out	0x24, r24	; 36
 a66:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a6c:	8f 77       	andi	r24, 0x7F	; 127
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a74:	8f 7d       	andi	r24, 0xDF	; 223
 a76:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a7a:	08 95       	ret

00000a7c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	fc 01       	movw	r30, r24
 a84:	e4 58       	subi	r30, 0x84	; 132
 a86:	ff 4f       	sbci	r31, 0xFF	; 255
 a88:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a8a:	fc 01       	movw	r30, r24
 a8c:	e0 57       	subi	r30, 0x70	; 112
 a8e:	ff 4f       	sbci	r31, 0xFF	; 255
 a90:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a92:	88 23       	and	r24, r24
 a94:	61 f1       	breq	.+88     	; 0xaee <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	88 0f       	add	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	fc 01       	movw	r30, r24
 a9e:	e8 54       	subi	r30, 0x48	; 72
 aa0:	ff 4f       	sbci	r31, 0xFF	; 255
 aa2:	c5 91       	lpm	r28, Z+
 aa4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 aa6:	fc 01       	movw	r30, r24
 aa8:	e2 55       	subi	r30, 0x52	; 82
 aaa:	ff 4f       	sbci	r31, 0xFF	; 255
 aac:	a5 91       	lpm	r26, Z+
 aae:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 ab0:	61 11       	cpse	r22, r1
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ab4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ab6:	f8 94       	cli
		*reg &= ~bit;
 ab8:	88 81       	ld	r24, Y
 aba:	20 95       	com	r18
 abc:	82 23       	and	r24, r18
 abe:	88 83       	st	Y, r24
		*out &= ~bit;
 ac0:	ec 91       	ld	r30, X
 ac2:	2e 23       	and	r18, r30
 ac4:	0b c0       	rjmp	.+22     	; 0xadc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ac6:	62 30       	cpi	r22, 0x02	; 2
 ac8:	61 f4       	brne	.+24     	; 0xae2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 aca:	9f b7       	in	r25, 0x3f	; 63
                cli();
 acc:	f8 94       	cli
		*reg &= ~bit;
 ace:	88 81       	ld	r24, Y
 ad0:	32 2f       	mov	r19, r18
 ad2:	30 95       	com	r19
 ad4:	83 23       	and	r24, r19
 ad6:	88 83       	st	Y, r24
		*out |= bit;
 ad8:	ec 91       	ld	r30, X
 ada:	2e 2b       	or	r18, r30
 adc:	2c 93       	st	X, r18
		SREG = oldSREG;
 ade:	9f bf       	out	0x3f, r25	; 63
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 ae2:	8f b7       	in	r24, 0x3f	; 63
                cli();
 ae4:	f8 94       	cli
		*reg |= bit;
 ae6:	e8 81       	ld	r30, Y
 ae8:	2e 2b       	or	r18, r30
 aea:	28 83       	st	Y, r18
		SREG = oldSREG;
 aec:	8f bf       	out	0x3f, r24	; 63
	}
}
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	08 95       	ret

00000af4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 afa:	28 2f       	mov	r18, r24
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	f9 01       	movw	r30, r18
 b00:	e8 59       	subi	r30, 0x98	; 152
 b02:	ff 4f       	sbci	r31, 0xFF	; 255
 b04:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b06:	f9 01       	movw	r30, r18
 b08:	e4 58       	subi	r30, 0x84	; 132
 b0a:	ff 4f       	sbci	r31, 0xFF	; 255
 b0c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b0e:	f9 01       	movw	r30, r18
 b10:	e0 57       	subi	r30, 0x70	; 112
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b16:	cc 23       	and	r28, r28
 b18:	c1 f0       	breq	.+48     	; 0xb4a <digitalWrite+0x56>
 b1a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b1c:	81 11       	cpse	r24, r1
 b1e:	0e 94 15 05 	call	0xa2a	; 0xa2a <turnOffPWM>

	out = portOutputRegister(port);
 b22:	ec 2f       	mov	r30, r28
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	ee 0f       	add	r30, r30
 b28:	ff 1f       	adc	r31, r31
 b2a:	e2 55       	subi	r30, 0x52	; 82
 b2c:	ff 4f       	sbci	r31, 0xFF	; 255
 b2e:	a5 91       	lpm	r26, Z+
 b30:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b32:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b34:	f8 94       	cli

	if (val == LOW) {
 b36:	11 11       	cpse	r17, r1
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <digitalWrite+0x4e>
		*out &= ~bit;
 b3a:	8c 91       	ld	r24, X
 b3c:	d0 95       	com	r29
 b3e:	d8 23       	and	r29, r24
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <digitalWrite+0x52>
	} else {
		*out |= bit;
 b42:	ec 91       	ld	r30, X
 b44:	de 2b       	or	r29, r30
 b46:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b48:	9f bf       	out	0x3f, r25	; 63
}
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	08 95       	ret

00000b52 <digitalRead>:

int digitalRead(uint8_t pin)
{
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b56:	28 2f       	mov	r18, r24
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	f9 01       	movw	r30, r18
 b5c:	e8 59       	subi	r30, 0x98	; 152
 b5e:	ff 4f       	sbci	r31, 0xFF	; 255
 b60:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b62:	f9 01       	movw	r30, r18
 b64:	e4 58       	subi	r30, 0x84	; 132
 b66:	ff 4f       	sbci	r31, 0xFF	; 255
 b68:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b6a:	f9 01       	movw	r30, r18
 b6c:	e0 57       	subi	r30, 0x70	; 112
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 b72:	cc 23       	and	r28, r28
 b74:	91 f0       	breq	.+36     	; 0xb9a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b76:	81 11       	cpse	r24, r1
 b78:	0e 94 15 05 	call	0xa2a	; 0xa2a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b7c:	ec 2f       	mov	r30, r28
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	ee 0f       	add	r30, r30
 b82:	ff 1f       	adc	r31, r31
 b84:	ec 55       	subi	r30, 0x5C	; 92
 b86:	ff 4f       	sbci	r31, 0xFF	; 255
 b88:	a5 91       	lpm	r26, Z+
 b8a:	b4 91       	lpm	r27, Z
 b8c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b8e:	ed 23       	and	r30, r29
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	21 f4       	brne	.+8      	; 0xb9e <digitalRead+0x4c>
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <digitalRead+0x4c>
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	08 95       	ret

00000ba4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ba4:	08 95       	ret

00000ba6 <__udivmodsi4>:
 ba6:	a1 e2       	ldi	r26, 0x21	; 33
 ba8:	1a 2e       	mov	r1, r26
 baa:	aa 1b       	sub	r26, r26
 bac:	bb 1b       	sub	r27, r27
 bae:	fd 01       	movw	r30, r26
 bb0:	0d c0       	rjmp	.+26     	; 0xbcc <__udivmodsi4_ep>

00000bb2 <__udivmodsi4_loop>:
 bb2:	aa 1f       	adc	r26, r26
 bb4:	bb 1f       	adc	r27, r27
 bb6:	ee 1f       	adc	r30, r30
 bb8:	ff 1f       	adc	r31, r31
 bba:	a2 17       	cp	r26, r18
 bbc:	b3 07       	cpc	r27, r19
 bbe:	e4 07       	cpc	r30, r20
 bc0:	f5 07       	cpc	r31, r21
 bc2:	20 f0       	brcs	.+8      	; 0xbcc <__udivmodsi4_ep>
 bc4:	a2 1b       	sub	r26, r18
 bc6:	b3 0b       	sbc	r27, r19
 bc8:	e4 0b       	sbc	r30, r20
 bca:	f5 0b       	sbc	r31, r21

00000bcc <__udivmodsi4_ep>:
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	1a 94       	dec	r1
 bd6:	69 f7       	brne	.-38     	; 0xbb2 <__udivmodsi4_loop>
 bd8:	60 95       	com	r22
 bda:	70 95       	com	r23
 bdc:	80 95       	com	r24
 bde:	90 95       	com	r25
 be0:	9b 01       	movw	r18, r22
 be2:	ac 01       	movw	r20, r24
 be4:	bd 01       	movw	r22, r26
 be6:	cf 01       	movw	r24, r30
 be8:	08 95       	ret

00000bea <__tablejump2__>:
 bea:	ee 0f       	add	r30, r30
 bec:	ff 1f       	adc	r31, r31
 bee:	05 90       	lpm	r0, Z+
 bf0:	f4 91       	lpm	r31, Z
 bf2:	e0 2d       	mov	r30, r0
 bf4:	09 94       	ijmp

00000bf6 <_exit>:
 bf6:	f8 94       	cli

00000bf8 <__stop_program>:
 bf8:	ff cf       	rjmp	.-2      	; 0xbf8 <__stop_program>
