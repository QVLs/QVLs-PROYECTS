
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000672  00000000  00000000  000009d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 81 00 	call	0x102	; 0x102 <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <PAUSE_FLUJO>:
void PAUSE_FLUJO(uint16_t DELAY,int CS_12,int CS_11,int CS_10){
   int C_12=CS_12;
   int C_11=CS_11;
   int C_10=CS_10;
   int TEMP=DELAY;
   if ((C_12==BIT0)&&(C_11==BIT1)&&(C_10==BIT1)){TCCR1B=0x03;}else{
  80:	61 15       	cp	r22, r1
  82:	71 05       	cpc	r23, r1
  84:	81 f4       	brne	.+32     	; 0xa6 <PAUSE_FLUJO+0x26>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	51 05       	cpc	r21, r1
  8a:	19 f5       	brne	.+70     	; 0xd2 <PAUSE_FLUJO+0x52>
  8c:	21 30       	cpi	r18, 0x01	; 1
  8e:	31 05       	cpc	r19, r1
  90:	21 f4       	brne	.+8      	; 0x9a <PAUSE_FLUJO+0x1a>
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  98:	24 c0       	rjmp	.+72     	; 0xe2 <PAUSE_FLUJO+0x62>
   if((C_12==BIT0)&&(C_11==BIT1)&&(C_10==BIT0)){TCCR1B=0x02;}else{
  9a:	23 2b       	or	r18, r19
  9c:	11 f5       	brne	.+68     	; 0xe2 <PAUSE_FLUJO+0x62>
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <PAUSE_FLUJO+0x62>
   if((C_12==BIT1)&&(C_11==BIT0)&&(C_10==BIT1)){TCCR1B=0x05;}else{
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	71 05       	cpc	r23, r1
  aa:	d9 f4       	brne	.+54     	; 0xe2 <PAUSE_FLUJO+0x62>
  ac:	41 15       	cp	r20, r1
  ae:	51 05       	cpc	r21, r1
  b0:	39 f4       	brne	.+14     	; 0xc0 <PAUSE_FLUJO+0x40>
  b2:	21 30       	cpi	r18, 0x01	; 1
  b4:	31 05       	cpc	r19, r1
  b6:	a9 f4       	brne	.+42     	; 0xe2 <PAUSE_FLUJO+0x62>
  b8:	25 e0       	ldi	r18, 0x05	; 5
  ba:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  be:	11 c0       	rjmp	.+34     	; 0xe2 <PAUSE_FLUJO+0x62>
   if((C_12==BIT1)&&(C_11==BIT1)&&(C_10==BIT0)){TCCR1B=0x04;}else{
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	51 05       	cpc	r21, r1
  c4:	71 f4       	brne	.+28     	; 0xe2 <PAUSE_FLUJO+0x62>
  c6:	23 2b       	or	r18, r19
  c8:	61 f4       	brne	.+24     	; 0xe2 <PAUSE_FLUJO+0x62>
  ca:	24 e0       	ldi	r18, 0x04	; 4
  cc:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  d0:	08 c0       	rjmp	.+16     	; 0xe2 <PAUSE_FLUJO+0x62>
   if((C_12==BIT0)&&(C_11==BIT0)&&(C_10==BIT1)){TCCR1B=0x01;}}}}}
  d2:	45 2b       	or	r20, r21
  d4:	31 f4       	brne	.+12     	; 0xe2 <PAUSE_FLUJO+0x62>
  d6:	21 30       	cpi	r18, 0x01	; 1
  d8:	31 05       	cpc	r19, r1
  da:	19 f4       	brne	.+6      	; 0xe2 <PAUSE_FLUJO+0x62>
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   /*INDICADOR DEL VALOR DE PRESCALER*/
   // if(TCCR1B&(BIT1<<CS12)){PORTB|=(BIT1<<PORTB4);}
   // if(TCCR1B&(BIT1<<CS11)){PORTB|=(BIT1<<PORTB5);}
   // if(TCCR1B&(BIT1<<CS10)){PORTB|=(BIT1<<PORTB6);}
   /*INDICADOR DEL VALOR DE PRESCALER*/
   TCNT1=0;
  e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
   while(TCNT1!=TEMP){}
  ea:	e4 e8       	ldi	r30, 0x84	; 132
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01
  f2:	82 17       	cp	r24, r18
  f4:	93 07       	cpc	r25, r19
  f6:	d9 f7       	brne	.-10     	; 0xee <PAUSE_FLUJO+0x6e>
TCNT1=0;}
  f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 100:	08 95       	ret

00000102 <main>:

int main(void)
{

 
   DDRD=0xFF;  
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a b9       	out	0x0a, r24	; 10
   DDRB=0x07; 
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	84 b9       	out	0x04, r24	; 4
   DDRC=0x3F; 
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	87 b9       	out	0x07, r24	; 7
    /* Replace with your application code */
    while (1) 
    {
  PORTD=0xFF;
 10e:	1f ef       	ldi	r17, 0xFF	; 255
  PORTC=0x3F;
 110:	df e3       	ldi	r29, 0x3F	; 63
  PORTB=0x07;
 112:	c7 e0       	ldi	r28, 0x07	; 7
   DDRB=0x07; 
   DDRC=0x3F; 
    /* Replace with your application code */
    while (1) 
    {
  PORTD=0xFF;
 114:	1b b9       	out	0x0b, r17	; 11
  PORTC=0x3F;
 116:	d8 b9       	out	0x08, r29	; 8
  PORTB=0x07;
 118:	c5 b9       	out	0x05, r28	; 5
  //_delay_ms(1000);
  PAUSE_FLUJO(60000,0,1,0);
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	9a ee       	ldi	r25, 0xEA	; 234
 12a:	0e 94 40 00 	call	0x80	; 0x80 <PAUSE_FLUJO>
   PORTD=0x00;
 12e:	1b b8       	out	0x0b, r1	; 11
   PORTC=0x00;
 130:	18 b8       	out	0x08, r1	; 8
   PORTB=0x00;
 132:	15 b8       	out	0x05, r1	; 5
  //_delay_ms(1000);
  PAUSE_FLUJO(25000,0,1,0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	88 ea       	ldi	r24, 0xA8	; 168
 142:	91 e6       	ldi	r25, 0x61	; 97
 144:	0e 94 40 00 	call	0x80	; 0x80 <PAUSE_FLUJO>
 148:	e5 cf       	rjmp	.-54     	; 0x114 <main+0x12>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
