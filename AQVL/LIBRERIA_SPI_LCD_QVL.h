#ifndef SPI_LCD_LIBRARY
#define SPI_LCD_LIBRARY


#include <avr/io.h>
#include <avr/LIBRERIA_SPI_QVL.h>

/*PROTOTIPOS DE FUNCIONES DESCRITAS A CONTINUACION*/
void GENERADOR_DE_COLOR(int16_t,int16_t, int16_t[]);
void GENERADOR_DE_FORMAS(int16_t,int16_t,int16_t,int16_t,int16_t[]);
void COMMAND_ILI9431(int8_t);
void PARAMETER_ILI9431_16_BITS(int8_t);
void PARAMETER_ILI9431_8_BITS(int8_t);
/*PROTOTIPOS DE FUNCIONES DESCRITAS A CONTINUACION*/


/*ESTA FUNCION SIRVE PARA EL MAPEO DE LA MATRIZ DE COLOR DEL AREA DEFINIDA
POR LA FUNCION EJEMPLO: (GENERADOR_DE_FORMAS(BASE,ALTURA,COOR_X,COOR_Y,MATRIZ_DE_DATOS[]));*/
void GENERADOR_DE_COLOR(int16_t X,int16_t Y, int16_t DATA_IMAGES[]){
PORTC^=(1<<PORTC4);
PORTC^=(1<<PORTC1);
SPI_MASTER_TRANSMITION_8_BITS(0x2c);
PORTC^=(1<<PORTC1);
/*int16_t LUIS_0=0;*/
for(int LUIS=0;LUIS!=(X*Y);LUIS++){
// PORTC^=(1<<PORTC4);
// int16_t LCD_BUS=READ_MEMORY_16_BIT(_READ_MEMORY_SPI_,LUIS_0);
// PORTC^=(1<<PORTC4);
SPI_MASTER_TRANSMITION_16_BITS(DATA_IMAGES[LUIS] /*LCD_BUS*/);/*LUIS_0=LUIS_0+2*/;}
PORTC^=(1<<PORTC1);}
/*ESTA FUNCION SIRVE PARA EL MAPEO DE LA MATRIZ DE COLOR DEL AREA DEFINIDA POR LA FUNCION GENERADOR_DE_FORMAS();*/

/*ESTA FUNCION SIRVE PARA DEFINIR EL AREA DE MAPEADO DE LA PANALLA ALTO Y ANCHO DELA PANTALLA*/
void GENERADOR_DE_FORMAS(int16_t BASE,int16_t ALTURA,int16_t ADDRES_X,int16_t ADDRES_Y,int16_t DATA_IMAGES[]){
int16_t DIMENSIONES[2];
int16_t COORDENADAS[2];
COORDENADAS[0]=ADDRES_X;
COORDENADAS[1]=ADDRES_Y;
DIMENSIONES[0]=BASE-1;
DIMENSIONES[1]=ALTURA-1;
char COMANDO[2]={0x2a,0x2b};
for(int CICLO=0;CICLO!=2;CICLO++){
PORTC^=(1<<PORTC4);/* SELECCIONA EL ESCLAVO ASOCIADO A ESTE PIN*/
PORTC^=(1<<PORTC1);/* SELECCIONA EL MODO D/C ASOCIADO A ESTE PIN SIRVE PARA PONER EL DYSPLAY EN MODO DE ENVIO INSTRUCCION  Y MODO ENVIO DE PARAMETRO*/
SPI_MASTER_TRANSMITION_8_BITS(COMANDO[CICLO]);
PORTC^=(1<<PORTC1);
SPI_MASTER_TRANSMITION_16_BITS(0+COORDENADAS[CICLO]);
SPI_MASTER_TRANSMITION_16_BITS(DIMENSIONES[CICLO]+COORDENADAS[CICLO]);
PORTC^=(1<<PORTC4);}
GENERADOR_DE_COLOR(BASE,ALTURA,DATA_IMAGES);
PORTC=(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0);}
/*ESTA FUNCION SIRVE PARA DEFINIR EL AREA DE MAPEADO DE LA PANALLA ALTO Y ANCHO DELA PANTALLA*/

/*ESTA FUNCION SIRBE PARAEL ENVIO DE COMANDOS DE INSTRUCCIONES AL CONTROLADOR LCD ILI9341*/
void COMMAND_ILI9431_8_BITS(int8_t COMMANDS){
	PORTC^=(1<<PORTC4);
	PORTC^=(1<<PORTC1);
	PAUSE_FLUJO(0,1,0,1);
	SPI_MASTER_TRANSMITION_8_BITS(COMMANDS);
	PORTC^=(1<<PORTC4);
PORTC^=(1<<PORTC1);}
/*ESTA FUNCION SIRBE PARAEL ENVIO DE COMANDOS DE INSTRUCCIONES AL CONTROLADOR LCD ILI9341*/

/*ESTA FUNCION SIRBE PARAEL ENVIO DE PARAMETROS DE INSTRUCCIONES AL CONTROLADOR LCD ILI9341*/
void PARAMETER_ILI9431_8_BITS(int8_t PARAMETER){
PORTC^=(1<<PORTC4);
PAUSE_FLUJO(0,1,0,1);
SPI_MASTER_TRANSMITION_8_BITS(PARAMETER);
PORTC^=(1<<PORTC4);}
/*ESTA FUNCION SIRBE PARAEL ENVIO DE PARAMETROS DE INSTRUCCIONES AL CONTROLADOR LCD ILI9341*/

/*ESTA FUNCION SIRBE PARAEL ENVIO DE PARAMETROS DE INSTRUCCIONES DE 2 bytes AL CONTROLADOR LCD ILI9341*/
void PARAMETER_ILI9431_16_BITS(int8_t PARAMETER){
PORTC^=(1<<PORTC4);
PAUSE_FLUJO(0,1,0,1);
SPI_MASTER_TRANSMITION_16_BITS(PARAMETER);
PORTC^=(1<<PORTC4);}
/*ESTA FUNCION SIRBE PARAEL ENVIO DE PARAMETROS DE INSTRUCCIONES DE 2 bytes AL CONTROLADOR LCD ILI9341*/

void ENCENDER_PANTALLA(void);
void ENCENDER_PANTALLA(void){
COMMAND_ILI9431_8_BITS(0x29);}

void APAGAR_PANTALLA(void);
void APAGAR_PANTALLA(void){
COMMAND_ILI9431_8_BITS(0x28);}
#endif
